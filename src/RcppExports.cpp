// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// qr_Q_inplace
void qr_Q_inplace(NumericMatrix x);
RcppExport SEXP _MLRClust_qr_Q_inplace(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    qr_Q_inplace(x);
    return R_NilValue;
END_RCPP
}
// rsample
Rcpp::S4 rsample(Rcpp::S4 A, double p);
RcppExport SEXP _MLRClust_rsample(SEXP ASEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(rsample(A, p));
    return rcpp_result_gen;
END_RCPP
}
// rsample_sym
Rcpp::S4 rsample_sym(Rcpp::S4 A, double p, bool use_lower);
RcppExport SEXP _MLRClust_rsample_sym(SEXP ASEXP, SEXP pSEXP, SEXP use_lowerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type use_lower(use_lowerSEXP);
    rcpp_result_gen = Rcpp::wrap(rsample_sym(A, p, use_lower));
    return rcpp_result_gen;
END_RCPP
}
// sparse_matrix_coords
SEXP sparse_matrix_coords(Rcpp::S4 mat, int nthread);
RcppExport SEXP _MLRClust_sparse_matrix_coords(SEXP matSEXP, SEXP nthreadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type nthread(nthreadSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_matrix_coords(mat, nthread));
    return rcpp_result_gen;
END_RCPP
}
// krylov_space_part
NumericMatrix krylov_space_part(SEXP coords, NumericMatrix P, double scale, int q, int nthread);
RcppExport SEXP _MLRClust_krylov_space_part(SEXP coordsSEXP, SEXP PSEXP, SEXP scaleSEXP, SEXP qSEXP, SEXP nthreadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type P(PSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type nthread(nthreadSEXP);
    rcpp_result_gen = Rcpp::wrap(krylov_space_part(coords, P, scale, q, nthread));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MLRClust_qr_Q_inplace", (DL_FUNC) &_MLRClust_qr_Q_inplace, 1},
    {"_MLRClust_rsample", (DL_FUNC) &_MLRClust_rsample, 2},
    {"_MLRClust_rsample_sym", (DL_FUNC) &_MLRClust_rsample_sym, 3},
    {"_MLRClust_sparse_matrix_coords", (DL_FUNC) &_MLRClust_sparse_matrix_coords, 2},
    {"_MLRClust_krylov_space_part", (DL_FUNC) &_MLRClust_krylov_space_part, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_MLRClust(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
